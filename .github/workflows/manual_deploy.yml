name: manual deploy
run-name: Deploy to ${{ inputs.service }} on ${{ github.ref_name }} branch by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      service:
        description: 'service name'
        required: true
        default: 'harrods'
        type: choice
        options:
          - harrods
          - stat
      env:
        description: '배포할 환경을 선택해주세요'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - alpha
          - prod

# 모든 변수 선언
env:
  AWS_REGION: ap-northeast-2
  S3_DEPLOY_BASE_PATH: s3://musinsa-server-build/dataplatform

jobs:
  setup_environment:
    name: setup environment
    runs-on: ubuntu-22.04
    outputs:
      service: ${{ steps.vars.outputs.service }}
      profile: ${{ steps.vars.outputs.profile }}
      build_file: ${{ steps.vars.outputs.build_file }}
      build_file_path: ${{ steps.vars.outputs.build_file_path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: vars
        name: Set input variables
        run: |
          echo "service=${{ inputs.service }}" >> $GITHUB_ENV
          echo "profile=${{ inputs.env }}" >> $GITHUB_ENV
          echo "build_file=${{ inputs.service }}.tar"  >> $GITHUB_ENV
          
           

      - id: env_vars
        name: Set env variables
        run: | 
          echo "build_file_path=${{ env.S3_DEPLOY_BASE_PATH }}/${{ env.service }}/${{ env.profile }}/${{ env.build_file }}"  >> $GITHUB_ENV
          
          if [ -d "${{ env.service }}" ]; then
            echo "service exist"
          else
            echo "Unsupported Service: ${{ env.service }}"
            exit 1
          fi

      - name: Print variables
        run: |
          echo service=${{ env.service }}
          echo profile=${{ env.profile }}
          echo build_file=${{ env.build_file }} 
          echo build_file_path=${{ env.build_file_path }} 

  build:
    name: build service
    runs-on: ubuntu-22.04
    needs: [ setup_environment ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Install Kotlin
        run: sudo snap install --classic kotlin --channel=1.7

      - name: Build
        run: ./gradlew :${{ env.service }}:build

  deploy:
    name: deploy service
    runs-on: ubuntu-22.04
    needs: [ build ]
    steps:
      - name: Compress tar
        run: tar -cvf ${{ env.build_file }} -C ./${{ env.service }}/build/libs .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: aws s3 cp --region ${{ env.AWS_REGION }} ${{ env.build_file }} ${{ env.build_file_path }}

  post:
    name: do post action
    runs-on: ubuntu-22.04
    needs: [deploy]
    steps:
      - name: Send result to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: ${{ env.service }}_build
          author_name: ${{ env.service }}_build_bot
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.STAT_SLACK_WEBHOOK_URL }}
        if: always()